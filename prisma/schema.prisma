generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid()) @db.Uuid
  username           String
  password           String
  email              String              @unique
  handle             String              @unique
  followers          Follow[]            @relation("followers")
  following          Follow[]            @relation("following")
  posts              Post[]
  likedPosts         PostLike[]
  avatar             String?
  banner             String?
  bio                String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  collections        Collection[]
  comments           Comment[]
  userSessions       UserSession[]
  notifications      Notification[]
  notificationActors NotificationActor[]

  @@index([username, handle])
}

model OTC {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  otc       String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

model NotificationActor {
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String       @db.Uuid
  actor          User         @relation(fields: [actorId], references: [id], onDelete: Cascade)
  actorId        String       @db.Uuid
  createdAt      DateTime     @default(now())

  @@id([notificationId, actorId])
}

model Notification {
  id          String              @id @default(uuid()) @db.Uuid
  recipient   User                @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId String              @db.Uuid
  actors      NotificationActor[]
  type        NotificationType
  post        Post?               @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String?             @db.Uuid
  isRead      Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime
}

model Follow {
  followerId String   @db.Uuid
  followedId String   @db.Uuid
  createdAt  DateTime @default(now())

  //RELATIONS
  follower User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followed User @relation("following", fields: [followedId], references: [id], onDelete: Cascade)

  @@id([followerId, followedId])
  @@unique([followerId, followedId])
}

model UserSession {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  browser   String?
  os        String?
  platform  String?
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Privacy {
  FRIENDS_ONLY
  PUBLIC
  ONLY_ME
}

model Collection {
  id              String           @id @default(uuid()) @db.Uuid
  photo           String?
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId         String           @db.Uuid
  name            String
  description     String?
  privacy         Privacy
  collectionItems CollectionItem[]
  posts           Post[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([name])
  @@index([ownerId])
}

model CollectionItem {
  id           String     @id @default(uuid()) @db.Uuid
  collectionId String     @db.Uuid
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  mediaId      String
  mediaType    MediaType
  media        Media      @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())

  //ensures that only one instance of an anime/tv/movie in a collection
  //ex: a collection cant have two Inception (2010). Only one.
  @@unique([collectionId, mediaId, mediaType])
}

enum MediaType {
  ANIME
  MOVIE
  TV
}

model Media {
  //id should be provided by frontend (anilistId of the anime, or tmdbId of the movie/tv)
  id          String    @id
  type        MediaType
  coverImage  String?
  posterImage String?
  title       String
  description String?
  year        String?
  rating      String?
  status      String?
  createdAt   DateTime  @default(now())

  //list of all collectionsItems and posts that reference this media
  collectionItems CollectionItem[]
  posts           Post[]

  @@index([title])
  @@map("media")
}

model Post {
  id           String         @id @default(uuid()) @db.Uuid
  ownerId      String         @db.Uuid
  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  content      String?
  privacy      Privacy
  comments     Comment[]
  likes        PostLike[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  //fields for OPTIONAL REFERENCES
  //a post can also contain a reference to a media, or a reference to a collection.
  //ex: user wants to share about the movie Inception (2010), 
  //or user wants to share their personal collection of horror movies
  mediaId      String?
  media        Media?         @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  collectionId String?        @db.Uuid
  collection   Collection?    @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@index([content])
  @@index([ownerId])
  @@map("posts")
}

model PostLike {
  userId    String   @db.Uuid
  postId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  postId    String   @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String   @db.Uuid
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
}
